1. 
Guess the output

const b = {
    name:'Raksha',
    f:function(){
        var self=this;
        console.log(this.name);
        (function(){
            console.log(this.name);
            console.log(self.name);
        }())
    }
}

Output: 
Sai
undefined
Sai

2.
let withdraw = 676;
const denominations = [200,50,100,20,5,2,1];

function getDenomination(){
    let denomiations_array = [];
    denominations.sort((a,b)=>b-a);
    for(let i=0;i<denominations.length;i++){
     let denomination_count = Math.trunc(withdraw/denominations[i]);
     withdraw = withdraw % denominations[i];
     for(let j=0;j<denomination_count;j++){
      denomiations_array.push(denominations[i]);
     }
    }
    return denomiations_array;
}

Output : [200,200,200,50,20,5,1]


3.
Anagram bored-robed

let str1="bored";
let str2="robed";

function isAnagram(){
    if(str1.length===str2.length){
        str1 = str1.split('').sort().join("");
        str2 = str2.split('').sort().join("");
        return str1==str2 ? true : false;
    
    }else{
        return false;
    }
}

4. 
Flat an Array
let input = [1,2,3,[4,5,[6,7,8,[9,10,11,23]]]];
//[4,5,[6,7,8,[9,10,11,23]]]
let output = [];

function flatArray(input){
    for(let i=0;i<input.length;i++){
        if(Array.isArray(input[i])){
          flatArray(input[i]);
        }else{
            output = [...output,input[i]];
        }
    }
}

flatArray(input);
console.log(output);

5.
Find Min and Max in an array

function findMinMax(array){
    if(!Array.isArray(array)) return "Invalid Input";
    
    let obj = {
        min:0,
        max:0
    };
    // obj['min'] = Math.min(...array);
    // obj['max'] = Math.max(...array);
    
    for(let i=0;i<array.length;i++){
        if(array[i]<obj['min']) obj['min'] = array[i];
        if(array[i]>obj['max']) obj['max'] = array[i];
    }
    return obj;
}

let output = findMinMax([1,5,7,8,9,0]);
console.log(output);


6.
Reverse an Array
function reverseAnArray(array){
    if(!Array.isArray(array)) return "Invalid Input";
    let reverse_array = [];
    let max = array.length-1;
    for(let i=max;i<=max;i--){
        reverse_array.push(array[i]);
        if(i==0) break
    }
    return reverse_array;
}

let output = reverseAnArray([1,5,7,8,9,0]);
console.log(output);

7.
Call , Apply and Bind
let obj1 = {
    a:1,
    b:2
}
// let c = ()=>{
//         console.log(this);
//     }
    
// let callMe = c.bind(obj1);
// callMe();

const callMe = (...arr) => {
    console.log('Call me',arr);
}

callMe.call(obj1,obj1.a,obj1.b);

let array = [1,2,3]

callMe.apply(obj1,array);

const bindCall = callMe.bind(obj1,obj1.a,obj1.b);

bindCall();

8.
Find Common Elements between two arrays

let array1 = [1,2,3,3,4,5];
let array2 = [3,4,5,6,7];

function getCommonElements(array1,array2){
    array1 = [...new Set(array1)];
    array2 = [...new Set(array2)];
    return array1.filter(ele=>array2.indexOf(ele)!=-1);
}

let result = getCommonElements(array1,array2);

console.log(result);

9.
Guess the output (Bind)
var vehical = "car";

var obj = {
    vehical:"bus",
    getVehical:function(){
        console.log(this.vehical);
    }
}

let result = obj.getVehical();
let result1 = obj.getVehical;
let result2 = obj.getVehical.bind(obj);
result1();
result2();

10.
Remove Duplicates
let array = [5,2,5,5,6,7,7,8,9];

let duplicates = array.filter((ele,index,self) => {if(index == self.indexOf(ele)){
 return ele   
}});

console.log(duplicates.sort())

11.
Link Geneartor 
let counter=0;
function generateLink(){
    return (function (){
        console.log(`link ${counter}`);
        counter++;
        return `link ${counter}`;
    })()
}

generateLink();
generateLink();

12.
Sum of n natural numbers O(n) - linear
function sumOfN(n){
    let sum = 0;
    for(let i=1;i<=n;i++){
     sum+=i;
    }
    return sum;
}

let result = sumOfN(100);

console.log(result);

Algorithm (n * (n+1))/2 - O(1)

function sumOfNAlgo(n){
   return (n * (n+1))/2
}

O(n2) - Quadratic

O(n3) - Cubic

O(logn) - Logarathamic

13.
Function to get fibonacci sequence given the value n
Input n=5 output [0,1,1,2,3]
--brootforce

function getFinocciSequence(n){
    let baseArray = [0,1];
    
    if(n==1) return [0];
    else if(n==2) return [0,1];
    else{
        for(i=0;i<n-2;i++){
            let sum = baseArray[i]+baseArray[i+1];
            baseArray.push(sum);
        }
        return baseArray;
    }
}

let result = getFinocciSequence(8);
console.log(result);

14.
Given a template literal and an object with a key value pair replace the variables with given keys
Example `he is ${name} very ${mood}`;
{
name:"Sai",
mood:"Good"
}

let template = `\${name} is a \${type}`;
let values = {name:"Python", type:"Programming language"};

for(let key in values) {
    let pattern = new RegExp(`\\$\\{${key}\\}`, "g");
    template = template.replace(pattern, values[key]);
}

console.log(template);

15.
Factorial of number
function getFactorialOfN(n){
    let result = 1
    for(let i = n;i>1;i--){
        result *= i;
    }
    return result;
}

let output = getFactorialOfN(5);

console.log(output);


16.
Given a value n determine if n is a prime number or not

Solution1 :
function isPrimeNumber(n){
    let count = 0;
    for(let i=2;i<=n;i++){
        if(n%i == 0)  count++;
    }
    if(count>1 || n==1) return 'given number is not a prime number';
    else return 'given number is prime number';
}

let result = isPrimeNumber(1);

console.log(result);

Time complexity : O(n)

Solution 2:
function isPrimeNumber(n){
    if(n<2) return false;
    for(let i=2;i<Math.sqrt(n);i++){
        if(n%i==0) return false;
    }
    return true;
}

let result = isPrimeNumber(1);

console.log(result);

Time complexity : O(sqrt(n))

17.
Power of two

Solution 1.
function checkIfPowerOfTwo(n) {
    for (let i = 0; i <= n; i++) {
        if (n == Math.pow(2, i)) return true;
    }

    return false;
}

let result = checkIfPowerOfTwo(5);

console.log(result);

Time complexity - O(n)

Solution2.
function isPowOfTwo(n){
    if(n<1) return false;
    while(n<1){
        if(n%2!=0) return false
        n=n/2;
    }
    return true
}

//Time Complexity is O(logn) 

Solution 3.
function isPowOfTwoBitwise(n){
    if(n<1) return false;
    return (n & (n-1)) == 0 //Bitwise And between n & n-1 will always be zero for power of 2
}

//TimeComplexity 0(1)

18.
//find nth Fibonocci sequence using recursion
// 0 1 1 2 3 5 8
function fibWithMemo(){
    let obj = {};
    return function fib(n){
        if(obj.hasOwnProperty(n)) return obj[n];
        if(n<2) return n;
        obj[n] = fib(n-1)+fib(n-2);
        return obj[n];
    }
    
}

let result = fibWithMemo();
console.log(result(1));

Time Complexity is O(2 power of n)
Iterative O(n)

19.
Find factorial using recursion

function findFactorial(n){
    if(n<0) return 'Invalid Number';
    if(n == 0 || n==1) return 1;
    return n * findFactorial(n-1)
}

let result = findFactorial(8);
console.log(result);
Time complexity - O(n)

20.
Create a generalized function for throttling

21.
Create a generalized function for debounce

22.
There are 3 radio buttons on click of any background color should changes #CSS Approach

23.
Find if given array is having atleast one string is similar (AAA, ABC,BAC, BBC,CBA) - true
Solution:
function findIfAlteastOneIsSimilar(arr){
    let nonDuplicateArray = [];
    for(let i = 0;i<arr.length;i++){
       nonDuplicateArray[i] = [...new Set([...arr[i]].sort())].join("");
    }

    return !(nonDuplicateArray.length == [...new Set(nonDuplicateArray)].length);

}

let result = findIfAlteastOneIsSimilar(['AAA', 'ABC','BAC', 'BBC','CBA'])
console.log(result);

24.
Create a function to push a random number in an array to last of array 
[1,0,4,0,9,0,0,7];
[1,4,9,7,0,0,0,0];

Solution:
function pushZerosToLast(arr){
    let nonZeroIndex = 0;
    for(let i=0;i<arr.length;i++){
        if(arr[i]!=0){
            arr[nonZeroIndex] = arr[i];
            nonZeroIndex++;
        }
    }

    for(let i=nonZeroIndex;i<arr.length;i++){
        arr[i]=0;
    }
    return arr;
}

let input=[1,0,4,0,9,0,0,7]
let response = pushZerosToLast(input);

console.log(response);

25.
Print dynamic url or link using closures

26.
Take a array of positive integers and return the length of the longest Increasing Sequence [LIS].
LIS is a subset of the original list where the numbers are in sorted order, from lowest to highest, and are in increasing order.
The sequence does not need to be unique or contnious and there can be several different subsets.

Example : [4,3,5,1,6]
Output : [3,5,6] [1,6]
Output should be length of longest subsequence which is 3

Example : [9,9,4,2] Output : 1

Example : [10,22,9,33,21,50,41,60,22,68,90]; Output : 7
Solution:
function maxLIS(arr){
    let n = arr.length;
    let subArrayCount = new Array(n).fill(1);
    for(let i=0;i<arr.length;i++){
        let tempArray = [arr[i]];
        if(i+1 < n){
            for(let j=i+1;j<arr.length;j++){
                if(arr[j]>arr[j-1]) tempArray.push(arr[j]);
            }
        }
        console.log(tempArray);
        subArrayCount[i] = tempArray.length;
    }
    return Math.max(...subArrayCount);

}

let input = [4,3,5,1,6]
let response = maxLIS(input);
console.log(response);

27.
If the Brackets are correctly matched and each one is accounted for. Otherwise return o.
For ex if str is "(hello [world])(!)" output 1 3 coz, are the brackets are matched and there are 3 pairs of brackets are matched.
If str containes no brackers return 1
Input :
"(coder)[byte)]"
Output 0

Input:
"(c([od]er)) b(yt[e])"
Output 1 5
Solution:
function matchedBrackets(str){
    let brackerStack = [];
    let bracketCount = 0;
    for(let char of str){
        if(char=='(' || char=='['){
            brackerStack.push(char);
            bracketCount++;
            console.log(bracketCount);
        }
        else if(char===")" && brackerStack.pop() != "(") return 0;
        else if(char==="]" && brackerStack.pop() != "[") return 0;
    }

    return brackerStack.length==0 ? `1 ${bracketCount}` : 0
}

let input = "(c([od]er)) b(yt[e])";
let response = matchedBrackets(input);

console.log(response);

28.
Ninja is given a few numbers, and he is being asked to rearrange the numbers so that every second element is greater than its left and right element.
Suppose the given array is [1, 2, 3, 4, 5] then the rearranged array can be [1, 3, 2, 5, 4].
function reArrangeNumber(arr){
    arr = arr.sort((a,b)=>a-b);
    for(let i=0;i<arr.length;i++){
        if(i%2!=0 && i+1<arr.length){
            [arr[i+1],arr[i]] = [arr[i],arr[i+1]];
        }
    }

    return arr;
}
let input = [1,2,3,4,5];
let response  = reArrangeNumber(input);
console.log(response);

29.
Code to sort a space-separated string of numbers in ascending order based on the sum of their digits "4444 102 306 508 905 77 213 667"

Solution:
function sortNumberString(str){
    let result = [];
    let sum=0;
    for(let char of str){
        if(char==" "){
            result.push(sum);
            sum=0;
        }
        else sum+=parseInt(char);
    }
    return result;
}
let input = "4444 102 306 508 905 77 213 667";
let response = sortNumberString(input).sort((a,b)=>a-b);
console.log(response);

30.
Given an array [-5,2,10,4,6] and a target element 10 return the index of target in array if exists else -1

let arr = [-5,2,10,4,6];
let target = 10;
function linearSearch(arr,target){
    for(let i=0;i<arr.length;i++){
        if(arr[i]==target) return i;
    }
    return -1;
}

console.log(linearSearch(arr,target));

Time Complexity : O(n)

31. Binary Search
1. Array should be sorted for binary Search
2. Calculate Mid Index on each iteration
3. If value of mid index == taget return taget
4. Else if value of mid index < target then change the left index to mid+1
5. Else if value of mid index > target the change the right index to mid-1 and continue the loop till left index<=right index
6. Time complexity of the above solution is O(log(n))

//Binary search with loop
// Sorted Array - [-5,2,4,6,10] target element - 4
// Return the target element index else -1
function binarySearchLoop(arr,target){
    let left = 0;
    let right = arr.length -1;
    let mid = Math.floor((left+right/2));
    while(left<=right){
        if(arr[mid] == target) return mid;
        else if(target>arr[mid]) left=mid+1;
        else if(target<arr[mid]) right=mid-1;
        mid=Math.floor((left+right)/2);
    }

    return -1;
}

console.log(binarySearchLoop([-5,2,4,6,10],11));

//Binary Search with recursion
function recursiveBinarySearch(arr, target, left, right) {
    if (left <= right) {
        const mid = Math.floor((left + right) / 2);

        if (arr[mid] === target) {
            return mid;
        } else if (arr[mid] < target) {
            return recursiveBinarySearch(arr, target, mid + 1, right);
        } else {
            return recursiveBinarySearch(arr, target, left, mid - 1);
        }
    } else {
        return -1;
    }
}

console.log(recursiveBinarySearch([-5,2,4,6,10],11,0,[-5,2,4,6,10].length-1));

Time complexity : O(logn)

//Given an array return the maximum product of 3 numbers
Solution : function findMaxOfthreeNumber(arr){
    let arr_len = arr.length;
    if(arr_len<3) return 'Invalid Length provided'
    arr.sort((a,b)=>a-b);
    let product1=arr[arr_len-1] * arr[len-2] * arr[len-3];
    let product2=arr[0]*arr[1]*arr[arr_len-1];
    return Math.max(product1,product2);
}

//Given a number convert the number to roman number
function getRomanNumber(num){
    if(num>20) return 'Please enter number less than 20'
    const romanMap = {
        1:"I",
        4:"IV",
        5:"V",
        9:"IV",
        10:"X",
        14:"XIV",
        15:"XV",
        19:"XIX",
        20:"XX"
    }
    let count=0;
    let roman;
    while(num>=1){
        console.log(num);
        if(!roman && romanMap[num]){
            roman = romanMap[num];
            break;
        }
        num = num-1;
        count++
    }
    for(let i=0;i<count;i++){
        roman+="I";
    }
    
    return roman
}

const result = getRomanNumber(20);
console.log(result);

//Find the maximum sum of a subarray of size k in the given array nums.
//Sliding Window Solution

let nums = [1, 4, 2, 10, 23, 3, 1, 0, 20]; //0 1 2 3 4 5 6 7 8
//len= 9
let k = 4
function findMaxOfSubArray(arr,k){
    if(arr.length<k) return 'Invalid input';
    let firstFive = arr.slice(0,k);
    let total = firstFive.reduce((a,b)=>a+b,0);
    let max = total;
    for(let i=0;i<arr.length-k;i++){
     total = total-arr[i]+arr[i+k];
        if(total>max) max=total;
    }
    return max;
}

const result = findMaxOfSubArray(nums,k);
console.log(result);

Two Pointer technique
Input should be sorted
//Problems
Two sum II - Input array is sorted
Valid Palindrome
Move zeros
Reverse string
Remove element
Logest substring without repeating characters
Remove duplicates from sorted arrays

//Check if string is valid braces - yet to solve
const str1 = "[{}]";
const str2 = "[{[(())]}][])}]";
const  str3 = "[)]";

function validBraces(str){
    let bracesStack = [];
    let bracessArray = str.split("");
    console.log(bracessArray);
    let isBraces = true;
    for(let index=0;index<bracessArray.length;index++){
        if(bracessArray[index].includes(["[","{","("])){
            bracesStack.push(bracessArray[index]);
        }else if(bracessArray[index]==")"){
            if(bracesStack.pop() != "(") return false;
        }else if(bracessArray[index]=="}"){
            if(bracesStack.pop() != "{") return false;
        }else if(bracessArray[index]=="]"){
            if(bracesStack.pop() != "[") return false;
        }
    }
    return true;
}


let res1 = validBraces(str2);
console.log(res1);

//Object destructuring of a nested object and assigning variables addess , city and state example

//Class style inheritance in JavaScript

// const res = multiply(5)(6)
 

// function multiply(a){
//     return function mul(b){
//         return a*b;
//     }
// }

// console.log(res);



// let obj = {'name': "Amit", 'age': 25}
// let temp = obj;
// obj.age = 30;
// console.log(temp) //{}


// let x = '';
 
// if (x !=x)
// {
// console.log("Nothing is impossible")
// }



// const res = multiply(5,6,7)
// const res1 = multiply(1,2,3,4,5)

// function multiply(...args){
//     return args.reduce((a,b)=>a*b,1);
// }

// class Animal{
//     name;
//     sound;
//     constructor(name,sound){
//         this.name = name;
//         this.sound = sound;
//     }
//     printAnimal(){
//         console.log(`${this.name} makes sound of ${this.sound}`);
//     }
// }

// class Dog extends Animal{
//     breed ;
//     age;
//     constructor(name,sound,breed,age){
//         super(name,sound);
//     }
// }

// const dog = new Dog('dog','bow bow','indian','12');

// dog.printAnimal();



// let input = [1,5,-9,-7,8] //n; //continious sub array which return max sum;

// function maxSubArray(arr){
//     let max = arr[0];
//     let maxSubArray = [];
//     for(let i=0;i<arr.length;i++){
//         for(let j=i+1;arr.length;j++){
//             let m = sum(i,j);
//             if(max > m) //push elements to maxSubArray;
//         }
//     }
// }

// function sum(i,j){
//     let s = 0;
//     for(let index=i;index<j;index++){
//         s+=input[index];
//     }
//     return s;
// }


//Find first non repeating character
const str = "inddia is my nation";

function findNonRepeatingChar(str){
    let input = str.split("");
    for(let i=0;i<input.length;i++){
        let str_sub = str.substring(i+1);
        console.log(input[i],str_sub);
        if(!str_sub.includes(input[i])) return [i,input[i]];
    }
}

console.log(findNonRepeatingChar(str))

Anagrams
// function isAnagram(str1,str2){
//     if(str1.length == str2.length){
//         str1 = str1.split("").sort().join("");
//         str2 = str2.split("").sort().join("");
//         console.log(str1,str2);
//         if(str1 == str2) return true; else return false;
//     }
//     return false;
// }


//Guess the output
async function async1() {
  console.log('async1 start');
  await async2();
  console.log('async1 end');
}

async function async2() {
  console.log('async2');
}

console.log('script start');

setTimeout(function() {
  console.log('setTimeout');
}, 0);

async1();

new Promise(function(resolve) {
  console.log('promise1');
  resolve();
}).then(function() {
  console.log('promise2');
});
console.log('script end');

const nums = [1,2,3,4,5,6,7];
nums.forEach((n) => {
    if(n%2 === 0) 
      break;
    console.log(n);

});

var a = true + true + true * 3;

a = [1, 2, 3, 4, 5];
print(a.slice(2, 4));

let x = "5"; 
let y = 2; 
console.log(x + y); 
console.log(x - y);

const arr = ['A', 'N', 'U'];
arr[10] = 10;
console.log(arr.length);

const obj1 = {first: 20, second: 30, first: 50};
console.log(obj1);

print(typeof(NaN));

//Rescrusion
print 1 to 10 without using loops
var i = 1;
function printnumbers(){
    let i = 1;
    let endcount = 20;
    if(i>endcount) return;
    console.log(i);
    i++;
    return printnumbers()
}

printnumbers();